title: <span style="color: #cf633cff;">**ATKR**</span> Congress
subtitle: The <span style="color: #cf633cff;">**ATKR**</span> (General Thoubian Workers' Union for the Republic) holds its congress...
view-if: year >= 1929 and month >= 5
max-visits: 1
tags: event
new-page: true

= <span style="color: #cf633cff;">**ATKR**</span> Congress

The <span style="color: #cf633cff;">**ATKR**</span> is the trade union confederation which formed from those trade unions which were committed to the restoration of the republic and dissatisfied with the <span style="color: #a22561;">**NTAP**</span>'s maintenance of the junta and focus on nationalism. Their existence is the backbone of our party, which has formed as a party for a union and has since grown into a parallel organization. Our success in this congress will depend on the relationship between this parallel organization and ours.

- @union_votes: The unions vote...

@union_votes
on-arrival: {! 

Q.union_parties = ['sapt', 'tndp', 'kpt', 'lapt', 'rpt'];
if (Q.left_split && !Q.sapo_absorbed) {
    Q.union_parties.push['sapo'];
}

for (var party of Q.union_parties) {
    Q[party+'_atkr'] = Q[party+'_workers_normalized'];
}
Q.sapt_atkr += (Q.labor_strength -= Q.labor_dissent);
Q.sapt_atkr *= (Q.socialism/100);
Q.tndp_atkr += (100-Q.pro_republic)/4;

total_atkr = 0;
for (var party of Q.union_parties) {
    if (Q[party+'_atkr'] <= 0) {
        Q[party+'_atkr'] = 0;
    }
    Q[party+'_atkr'] = Math.pow(Q[party+'_atkr'], 3);
    total_atkr += Q[party+'_atkr'];
}
for (var party of Q.union_parties) {
    Q[party+'_atkr'] = Math.round((Q[party+'_atkr']/total_atkr)*100);
}
!}
on-display: {!
data = Q.union_parties
    .filter(party => Q[party + '_atkr']) // Only include parties with seat data
    .map(party => ({
        id: party,
        legend: party.toUpperCase(),
        name: party.toUpperCase(),
        seats: Q[party+'_atkr'],
        leftist: Q[party + '_leftist'] || 0 // default to 0 if undefined
    }))
    .sort((a, b) => b.leftist - a.leftist) // sort from most to least left-wing
    .map(({ leftist, ...rest }) => rest); // remove `leftist` from final output

// `data` now contains the full party display list, ordered ideologically.

if (window && d3) {
    var width = 500;
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50;
        height = width;
        document.getElementById("reichstag").style.height = screenWidth/2 + "px";
    }
    var parliament = d3.parliament();
    parliament.width(width).height(height).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#reichstag").datum(data).call(parliament);

    var lines = d3.linegraph(false, false,
            Q.parties_graph,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC', 'lvp': '#FFCC00', 'dnef': '#BFC8CC', 'fkp': '#00C0FF'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP', 'lvp': 'LVP', 'dnef': 'DNEF', 'fkp': 'FKP'});
    lines.width(width).height(400);
    //var svg = lines(Q.election_records);
    d3.select("#election_history").datum(Q.election_records).call(lines);
    //document.getElementById('election_history').innerHTML = svg.outerHTML;

    // party support records should not have so many ticks
    if (!Q.historical_mode) {
        var lines_2 = d3.linegraph(true, true,
            Q.parties_graph,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC', 'lvp': '#FFCC00', 'dnef': '#BFC8CC', 'fkp': '#00C0FF'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP', 'lvp': 'LVP', 'dnef': 'DNEF', 'fkp': 'FKP'});
        lines_2.width(width).height(400);
        d3.select("#party_support_history").datum(Q.party_support_records).call(lines_2);
    }
}
!}
go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}
{!<table>!} 
<tr><td>Party</td><td>Vote share</td><td>Seats</td></tr>

<tr>
  <td><div class="box" style='background-color:#990000;'> </div> KPT:</td>
  <td>[+ kpt_atkr +]</td>
</tr>

[? if sapo_atkr: <tr> ?]
  [? if sapo_atkr: <td><div class="box" style='background-color:#d4130c;'> </div> SAP(O):</td> ?]
  [? if sapo_atkr: <td>[+ sapo_atkr +]</td> ?]
[? if sapo_atkr: </tr> ?]

<tr>
  <td><div class="box" style='background-color:#d4130c;'> </div> SAPT:</td>
  <td>[+ sapt_atkr +]</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#f5e324;'> </div> LAPT:</td>
  <td>[+ lapt_atkr +]</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#f5e324;'> </div> RPT:</td>
  <td>[+ rpt_atkr +]</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#a86b15;'> </div> TNDP:</td>
  <td>[+ tndp_atkr +]</td>
</tr>

{!</table>!}

@coalition_menu