title: Vilsorian Elections
subtitle: The "Savage South" heads to the polls...
new-page: true
tags: event
priority: -2
view-if: year == 1929 and month >= 7
max-visits: 1
set-jump: post_election_vilsoria
set-bg: img/map_2.jpg
#face-image: img/Rothe_Wahlen_1903.jpg

= Vilsorian Elections, [+ month : month +] [+ year +]

Elections to the state of Vilsoria's regional legislature are being held. The state of Vilsoria, on the border with Leanolu, has always been beset by crime as a result of its position on the border with the *Principality of Leanolu*, an exporter of both oil (legally) and opium (illegally) to the country, and with bandits in the Moasa Desert, which covers a large swathe of Vilsoria, acting as the middlemen in this opium trade. The economic crisis has caused this banditry to grow in prevalence.

The <span style="color: #a22561;">**NTAP**</span> and <span style="color: #2f387f;">**FK**</span> here maintain a joint listing, the <span style="color: #5a5380;">**AOE**</span> (Alliance of Order and Unity), in competition with the left-agrarian <span style="color: #85b24d;">**BAPV**</span> (Farmer-Labor Party of Vilsoria). They will compete across thirty-two plurality districts in the region, as well as for the thirty-two proportional seats.

- @election_algorithm: May we do our best...

@post_election_vilsoria
on-arrival: {!  
const PROPORTIONAL_SEATS = 32;
const TOTAL_SEATS = 64;
const threshold = 5;

// Step 1: Normalize votes to 100%
let totalVotes = 0;
Q.party_votes = {};  // Store normalized votes here

for (let party of Q.vilsoria_parties) {
    const rawVotes = Q[party + '_votes_vilsoria'] || 0;
    Q.party_votes[party] = rawVotes;
    totalVotes += rawVotes;
}

for (let party of Q.vilsoria_parties) {
    Q.party_votes[party] = Math.round(Q.party_votes[party] * 1000 / totalVotes) / 10; // normalize to 100, 1 decimal
}

// Step 2: Filter valid parties
let validParties = Q.vilsoria_parties.filter(party => {
    return Q[party + '_banned'] !== 1 && Q.party_votes[party] >= threshold;
});

// Step 3: D’Hondt table
let dhondtTable = [];

for (let party of validParties) {
    let votes = Q.party_votes[party];
    for (let divisor = 1; divisor <= PROPORTIONAL_SEATS; divisor++) {
        dhondtTable.push({
            party: party,
            value: votes / divisor
        });
    }
}

// Step 4: Allocate top 351 seats
dhondtTable.sort((a, b) => b.value - a.value);
let topSeats = dhondtTable.slice(0, PROPORTIONAL_SEATS);

// Step 5: Count seats
let seatCounts = {};
for (let seat of topSeats) {
    seatCounts[seat.party] = (seatCounts[seat.party] || 0) + 1;
}

// Step 6: Save seats and % of seats (_seats and _r)
for (let party of Q.vilsoria_parties) {
    const seats = seatCounts[party] || 0;
    Q[party + '_seats_vilsoria'] = seats;
}

// Step 7: FPTP seats
const FPTP_SEATS = 32;
var total_weight = 0;
for (var party of Q.vilsoria_parties) {
    Q[party+'_weighted_vilsoria_votes'] = Math.pow((Q[party+'_votes_vilsoria']*Q['vilsoria_'+party]), 2);
    total_weight += Q[party+'_weighted_vilsoria_votes'];
}
for (var party of Q.vilsoria_parties) {
    Q[party+'_weighted_vilsoria_votes'] = Q[party+'_weighted_vilsoria_votes']/total_weight;
}

// Step 8: D’Hondt for FPTP seats
let fptpDhondtTable = [];

for (let party of validParties) {
    let votes = Q[party + '_weighted_vilsoria_votes'];
    for (let divisor = 1; divisor <= FPTP_SEATS; divisor++) {
        fptpDhondtTable.push({
            party: party,
            value: votes / divisor
        });
    }
}

// Sort and take top FPTP_SEATS
fptpDhondtTable.sort((a, b) => b.value - a.value);
let fptpTopSeats = fptpDhondtTable.slice(0, FPTP_SEATS);

// Count seats per party
let fptpSeatCounts = {};
for (let seat of fptpTopSeats) {
    fptpSeatCounts[seat.party] = (fptpSeatCounts[seat.party] || 0) + 1;
}

// Step 9: Add FPTP seats to total seats
for (let party of Q.vilsoria_parties) {
    const seats = fptpSeatCounts[party] || 0;
    Q[party + '_seats_vilsoria'] += seats;
    Q[party+'_vr'] = parseFloat(((Q[party + '_seats_vilsoria'] / TOTAL_SEATS) * 100).toFixed(1));  // % of seats
}

!}
on-departure: nazi_urgency = 1 if (nazi_urgency == 0 and nsdap_r >= 15)
on-display: {!
data = Q.vilsoria_parties
    .filter(party => Q[party + '_seats_vilsoria']) // Only include parties with seat data
    .map(party => ({
        id: party,
        legend: party.toUpperCase(),
        name: party.toUpperCase(),
        seats: Q[party+'_seats_vilsoria'],
        leftist: Q[party + '_leftist'] || 0 // default to 0 if undefined
    }))
    .sort((a, b) => b.leftist - a.leftist) // sort from most to least left-wing
    .map(({ leftist, ...rest }) => rest); // remove `leftist` from final output

// `data` now contains the full party display list, ordered ideologically.

if (window && d3) {
    var width = 500;
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50;
        height = width;
        document.getElementById("reichstag").style.height = screenWidth/2 + "px";
    }
    var parliament = d3.parliament();
    parliament.width(width).height(height).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#reichstag").datum(data).call(parliament);

    var lines = d3.linegraph(false, false,
            Q.parties_graph,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC', 'lvp': '#FFCC00', 'dnef': '#BFC8CC', 'fkp': '#00C0FF'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP', 'lvp': 'LVP', 'dnef': 'DNEF', 'fkp': 'FKP'});
    lines.width(width).height(400);
    //var svg = lines(Q.election_records);
    d3.select("#election_history").datum(Q.election_records).call(lines);
    //document.getElementById('election_history').innerHTML = svg.outerHTML;

    // party support records should not have so many ticks
    if (!Q.historical_mode) {
        var lines_2 = d3.linegraph(true, true,
            Q.parties_graph,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC', 'lvp': '#FFCC00', 'dnef': '#BFC8CC', 'fkp': '#00C0FF'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP', 'lvp': 'LVP', 'dnef': 'DNEF', 'fkp': 'FKP'});
        lines_2.width(width).height(400);
        d3.select("#party_support_history").datum(Q.party_support_records).call(lines_2);
    }
}
!}
go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}
{!<table>!} 
<tr><td>Party</td><td>Vote share</td><td>Seats</td></tr>

<tr>
  <td><div class="box" style='background-color:#990000;'> </div> KPT:</td>
  <td>[+ kpt_votes_vilsoria +]%</td>
  <td>[+ kpt_seats_vilsoria +] ([+ kpt_vr +]%)</td>
</tr>

[? if sapo_seats: 
<tr>
  <td><div class="box" style='background-color:#d4130c;'> </div> SAP(O):</td>
  <td>[+ sapo_votes_vilsoria +]%</td>
  <td>[+ sapo_seats_vilsoria +] ([+ sapo_vr +]%)</td>
</tr>
?]

<tr>
  <td><div class="box" style='background-color:#d4130c;'> </div> SAPT:</td>
  <td>[+ sapt_votes_vilsoria +]%</td>
  <td>[+ sapt_seats_vilsoria +] ([+ sapt_vr +]%)</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#85b24d;'> </div> BAPV:</td>
  <td>[+ bapv_votes_vilsoria +]%</td>
  <td>[+ bapv_seats_vilsoria +] ([+ bapv_vr +]%)</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#f5e324;'> </div> RPT:</td>
  <td>[+ rpt_votes_vilsoria +]%</td>
  <td>[+ rpt_seats_vilsoria +] ([+ rpt_vr +]%)</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#a86b15;'> </div> TNDP:</td>
  <td>[+ tndp_votes_vilsoria +]%</td>
  <td>[+ tndp_seats_vilsoria +] ([+ tndp_vr +]%)</td>
</tr>

<tr>
  <td><div class="box" style='background-color:#5a5380;'> </div> AOE:</td>
  <td>[+ aoe_votes_vilsoria +]%</td>
  <td>[+ aoe_seats_vilsoria +] ([+ aoe_vr +]%)</td>
</tr>

{!</table>!}

@coalition_menu